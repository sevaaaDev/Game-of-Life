import { describe, expect, it } from "vitest";
import userEvent from "@testing-library/user-event";
import { screen, render } from "@testing-library/react";
import { GameOfLife } from "../GameOfLife.jsx";

describe("Game of life", () => {
  it("shows the correct next gen after click btn", async () => {
    let user = userEvent.setup();
    render(<GameOfLife />);
    let squares = screen.getAllByTestId("square");
    let nextBtn = screen.getByTestId("btn-next");
    await user.click(squares[0]);
    await user.click(squares[1]);
    await user.click(squares[2]);
    expect(squares[0]).toHaveAttribute("data-alive", "true");
    expect(squares[1]).toHaveAttribute("data-alive", "true");
    expect(squares[2]).toHaveAttribute("data-alive", "true");
    await user.click(nextBtn);
    expect(squares[0]).toHaveAttribute("data-alive", "false");
    expect(squares[1]).toHaveAttribute("data-alive", "true");
    expect(squares[2]).toHaveAttribute("data-alive", "false");
  });
  it("can unalive a cell with click", async () => {
    let user = userEvent.setup();
    render(<GameOfLife />);
    let squares = screen.getAllByTestId("square");
    await user.click(squares[0]);
    expect(squares[0]).toHaveAttribute("data-alive", "true");
    await user.click(squares[0]);
    expect(squares[0]).toHaveAttribute("data-alive", "false");
  });
  it("can go back to previous generation", async () => {
    let user = userEvent.setup();
    render(<GameOfLife />);
    let squares = screen.getAllByTestId("square");
    let nextBtn = screen.getByTestId("btn-next");
    let prevBtn = screen.getByTestId("btn-prev");
    await user.click(squares[0]);
    await user.click(squares[1]);
    await user.click(squares[2]);
    expect(squares[0]).toHaveAttribute("data-alive", "true");
    expect(squares[1]).toHaveAttribute("data-alive", "true");
    expect(squares[2]).toHaveAttribute("data-alive", "true");
    await user.click(nextBtn);
    expect(squares[0]).toHaveAttribute("data-alive", "false");
    expect(squares[1]).toHaveAttribute("data-alive", "true");
    expect(squares[2]).toHaveAttribute("data-alive", "false");
    await user.click(prevBtn);
  });
  it("can go back to previous generation when the gen is different", async () => {
    let user = userEvent.setup();
    render(<GameOfLife />);
    let squares = screen.getAllByTestId("square");
    let nextBtn = screen.getByTestId("btn-next");
    let prevBtn = screen.getByTestId("btn-prev");
    await user.click(squares[0]);
    await user.click(squares[1]);
    // FIX: flakey test
    await user.click(squares[50]);
    await user.click(squares[51]);
    expect(squares[0]).toHaveAttribute("data-alive", "true");
    expect(squares[1]).toHaveAttribute("data-alive", "true");
    expect(squares[50]).toHaveAttribute("data-alive", "true");
    expect(squares[51]).toHaveAttribute("data-alive", "true");
    await user.click(nextBtn);
    expect(squares[0]).toHaveAttribute("data-alive", "true");
    expect(squares[1]).toHaveAttribute("data-alive", "true");
    expect(squares[50]).toHaveAttribute("data-alive", "true");
    expect(squares[51]).toHaveAttribute("data-alive", "true");
    await user.click(nextBtn);
    await user.click(prevBtn);
    expect(squares[0]).toHaveAttribute("data-alive", "false");
    expect(squares[1]).toHaveAttribute("data-alive", "false");
    expect(squares[50]).toHaveAttribute("data-alive", "false");
    expect(squares[51]).toHaveAttribute("data-alive", "false");
  });
  it("reset the grid", async () => {
    let user = userEvent.setup();
    render(<GameOfLife />);
    let squares = screen.getAllByTestId("square");
    let resetBtn = screen.getByTestId("btn-reset");
    await user.click(squares[0]);
    await user.click(squares[10]);
    expect(squares[0]).toHaveAttribute("data-alive", "true");
    expect(squares[10]).toHaveAttribute("data-alive", "true");
    await user.click(resetBtn);
    expect(squares[0]).toHaveAttribute("data-alive", "false");
    expect(squares[10]).toHaveAttribute("data-alive", "false");
  });
});
